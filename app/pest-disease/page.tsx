"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { Bug, AlertTriangle, Shield, SprayCan as Spray, Clock, Camera, Leaf, ArrowLeft, Globe } from "lucide-react"
import Link from "next/link"

const crops = [
  { value: "wheat", label: "‡§ó‡•á‡§π‡•Ç‡§Ç / Wheat" },
  { value: "rice", label: "‡§ö‡§æ‡§µ‡§≤ / Rice" },
  { value: "cotton", label: "‡§ï‡§™‡§æ‡§∏ / Cotton" },
  { value: "sugarcane", label: "‡§ó‡§®‡•ç‡§®‡§æ / Sugarcane" },
  { value: "tomato", label: "‡§ü‡§Æ‡§æ‡§ü‡§∞ / Tomato" },
  { value: "potato", label: "‡§Ü‡§≤‡•Ç / Potato" },
]

const pestData = {
  wheat: [
    {
      name: "Aphids",
      hindiName: "‡§Æ‡§æ‡§π‡•Ç",
      riskLevel: "high",
      description: "Small green insects sucking plant juices",
      symptoms: "Yellowing leaves, sticky honeydew",
      preventiveMeasures: [
        { step: "‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ / Regular inspection", icon: "üëÅÔ∏è" },
        { step: "‡§®‡•Ä‡§Æ ‡§ï‡§æ ‡§§‡•á‡§≤ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ / Neem oil spray", icon: "üåø" },
        { step: "‡§≤‡•á‡§°‡•Ä‡§¨‡§∞‡•ç‡§° ‡§¨‡•Ä‡§ü‡§≤ ‡§õ‡•ã‡§°‡§º‡•á‡§Ç / Release ladybird beetles", icon: "üêû" },
        { step: "‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç / Control water amount", icon: "üíß" },
      ],
    },
    {
      name: "Rust Disease",
      hindiName: "‡§∞‡§§‡•Å‡§Ü ‡§∞‡•ã‡§ó",
      riskLevel: "medium",
      description: "Fungal disease causing orange-brown spots",
      symptoms: "Orange pustules on leaves",
      preventiveMeasures: [
        { step: "‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ ‡§â‡§ó‡§æ‡§è‡§Ç / Grow resistant varieties", icon: "üåæ" },
        { step: "‡§´‡§Ç‡§ó‡•Ä‡§∏‡§æ‡§á‡§° ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ / Fungicide spray", icon: "üíä" },
        { step: "‡§ñ‡•á‡§§ ‡§ï‡•Ä ‡§∏‡§´‡§æ‡§à / Field sanitation", icon: "üßπ" },
        { step: "‡§â‡§ö‡§ø‡§§ ‡§¶‡•Ç‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç / Maintain proper spacing", icon: "üìè" },
      ],
    },
  ],
  rice: [
    {
      name: "Brown Plant Hopper",
      hindiName: "‡§≠‡•Ç‡§∞‡§æ ‡§´‡•Å‡§¶‡§ï‡§æ",
      riskLevel: "high",
      description: "Small brown insects causing hopper burn",
      symptoms: "Yellowing and drying of plants",
      preventiveMeasures: [
        { step: "‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç / Control water level", icon: "üåä" },
        { step: "‡§®‡§§‡•ç‡§∞‡§ú‡§® ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç / Reduce nitrogen", icon: "üß™" },
        { step: "‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§∂‡§§‡•ç‡§∞‡•Å ‡§õ‡•ã‡§°‡§º‡•á‡§Ç / Release natural enemies", icon: "üï∑Ô∏è" },
        { step: "‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ ‡§ú‡§æ‡§≤ ‡§≤‡§ó‡§æ‡§è‡§Ç / Use light traps", icon: "üí°" },
      ],
    },
    {
      name: "Blast Disease",
      hindiName: "‡§¨‡•ç‡§≤‡§æ‡§∏‡•ç‡§ü ‡§∞‡•ã‡§ó",
      riskLevel: "medium",
      description: "Fungal disease affecting leaves and panicles",
      symptoms: "Diamond-shaped lesions on leaves",
      preventiveMeasures: [
        { step: "‡§¨‡•Ä‡§ú ‡§â‡§™‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç / Treat seeds", icon: "üå±" },
        { step: "‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï / Balanced fertilizer", icon: "‚öñÔ∏è" },
        { step: "‡§ñ‡•á‡§§ ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§®‡•Ä ‡§® ‡§≠‡§∞‡•á‡§Ç / Avoid water stagnation", icon: "üö´" },
        { step: "‡§∞‡•ã‡§ó‡•Ä ‡§™‡•å‡§ß‡•á ‡§π‡§ü‡§æ‡§è‡§Ç / Remove infected plants", icon: "‚úÇÔ∏è" },
      ],
    },
  ],
  cotton: [
    {
      name: "Bollworm",
      hindiName: "‡§ó‡•Å‡§≤‡§æ‡§¨‡•Ä ‡§∏‡•Å‡§Ç‡§°‡•Ä",
      riskLevel: "high",
      description: "Caterpillars damaging cotton bolls",
      symptoms: "Holes in bolls, pink larvae inside",
      preventiveMeasures: [
        { step: "‡§´‡•á‡§∞‡•ã‡§Æ‡•ã‡§® ‡§ü‡•ç‡§∞‡•à‡§™ ‡§≤‡§ó‡§æ‡§è‡§Ç / Install pheromone traps", icon: "ü™§" },
        { step: "‡§¨‡•Ä‡§ü‡•Ä ‡§ï‡•â‡§ü‡§® ‡§â‡§ó‡§æ‡§è‡§Ç / Grow Bt cotton", icon: "üß¨" },
        { step: "‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ / Regular monitoring", icon: "üîç" },
        { step: "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï / Bio-pesticides", icon: "üåø" },
      ],
    },
  ],
}

const getRiskColor = (level: string) => {
  switch (level) {
    case "high":
      return "bg-red-100 text-red-800 border-red-200"
    case "medium":
      return "bg-yellow-100 text-yellow-800 border-yellow-200"
    case "low":
      return "bg-green-100 text-green-800 border-green-200"
    default:
      return "bg-gray-100 text-gray-800 border-gray-200"
  }
}

const getRiskIcon = (level: string) => {
  switch (level) {
    case "high":
      return <AlertTriangle className="h-4 w-4 text-red-600" />
    case "medium":
      return <AlertTriangle className="h-4 w-4 text-yellow-600" />
    case "low":
      return <Shield className="h-4 w-4 text-green-600" />
    default:
      return <Bug className="h-4 w-4" />
  }
}

export default function PestDiseasePage() {
  const [selectedCrop, setSelectedCrop] = useState<string>("")
  const [selectedLanguage, setSelectedLanguage] = useState("hi")

  const currentPests = selectedCrop ? pestData[selectedCrop as keyof typeof pestData] || [] : []

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <Link href="/dashboard" className="flex items-center text-green-700 hover:text-green-800">
                <ArrowLeft className="h-5 w-5 mr-2" />
                <span className="font-medium">‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° / Dashboard</span>
              </Link>
            </div>

            <div className="flex items-center space-x-4">
              <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                <SelectTrigger className="w-32">
                  <Globe className="h-4 w-4 mr-2" />
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="hi">‡§π‡§ø‡§Ç‡§¶‡•Ä</SelectItem>
                  <SelectItem value="en">English</SelectItem>
                  <SelectItem value="pa">‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä</SelectItem>
                  <SelectItem value="mr">‡§Æ‡§∞‡§æ‡§†‡•Ä</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Page Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-green-800 mb-2">‡§ï‡•Ä‡§ü ‡§î‡§∞ ‡§∞‡•ã‡§ó ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® / Pest & Disease Management</h1>
          <p className="text-gray-600">
            ‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•Ä‡§ü-‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç / Select your crop and get pest-disease information
          </p>
        </div>

        {/* Crop Selection */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Leaf className="h-5 w-5 mr-2 text-green-600" />
              ‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç / Select Crop
            </CardTitle>
            <CardDescription>
              ‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡§ï‡•á ‡§ï‡•Ä‡§ü-‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç / Choose your crop to view pest and disease information
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Select value={selectedCrop} onValueChange={setSelectedCrop}>
                <SelectTrigger className="h-12">
                  <SelectValue placeholder="‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç / Select Crop" />
                </SelectTrigger>
                <SelectContent>
                  {crops.map((crop) => (
                    <SelectItem key={crop.value} value={crop.value}>
                      {crop.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              {/* AI Photo Detection Placeholder */}
              <Button variant="outline" className="h-12 bg-transparent" disabled>
                <Camera className="h-4 w-4 mr-2" />
                ‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç / Upload Photo
                <Badge variant="secondary" className="ml-2">
                  ‡§ú‡§≤‡•ç‡§¶ ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à / Coming Soon
                </Badge>
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Pest Alerts */}
        {selectedCrop && currentPests.length > 0 && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-green-800 mb-4">‡§ï‡•Ä‡§ü ‡§î‡§∞ ‡§∞‡•ã‡§ó ‡§Ö‡§≤‡§∞‡•ç‡§ü / Pest & Disease Alerts</h2>

            {currentPests.map((pest, index) => (
              <Card key={index} className="overflow-hidden">
                <CardHeader className="pb-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="flex items-center mb-2">
                        <Bug className="h-5 w-5 mr-2 text-green-600" />
                        {pest.hindiName} / {pest.name}
                      </CardTitle>
                      <CardDescription className="text-base">{pest.description}</CardDescription>
                    </div>
                    <Badge className={`${getRiskColor(pest.riskLevel)} flex items-center`}>
                      {getRiskIcon(pest.riskLevel)}
                      <span className="ml-1 capitalize">{pest.riskLevel} Risk</span>
                    </Badge>
                  </div>
                </CardHeader>

                <CardContent className="space-y-6">
                  {/* Symptoms */}
                  <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>
                      <strong>‡§≤‡§ï‡•ç‡§∑‡§£ / Symptoms:</strong> {pest.symptoms}
                    </AlertDescription>
                  </Alert>

                  {/* Preventive Measures */}
                  <div>
                    <h4 className="font-semibold text-green-800 mb-4 flex items-center">
                      <Shield className="h-4 w-4 mr-2" />
                      ‡§¨‡§ö‡§æ‡§µ ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø / Preventive Measures
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {pest.preventiveMeasures.map((measure, measureIndex) => (
                        <Card key={measureIndex} className="bg-green-50 border-green-200">
                          <CardContent className="p-4">
                            <div className="flex items-center space-x-3">
                              <div className="text-2xl">{measure.icon}</div>
                              <div className="flex-1">
                                <p className="text-sm font-medium text-green-800">
                                  ‡§ö‡§∞‡§£ {measureIndex + 1} / Step {measureIndex + 1}
                                </p>
                                <p className="text-green-700">{measure.step}</p>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex flex-wrap gap-3 pt-4 border-t">
                    <Button className="bg-green-600 hover:bg-green-700">
                      <Spray className="h-4 w-4 mr-2" />
                      ‡§â‡§™‡§ö‡§æ‡§∞ ‡§ó‡§æ‡§á‡§° / Treatment Guide
                    </Button>
                    <Button variant="outline">
                      <Clock className="h-4 w-4 mr-2" />
                      ‡§∞‡§ø‡§Æ‡§æ‡§á‡§Ç‡§°‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç / Set Reminder
                    </Button>
                    <Button variant="outline">
                      <Bug className="h-4 w-4 mr-2" />
                      ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç / Report Pest
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {/* Empty State */}
        {!selectedCrop && (
          <Card className="text-center py-12">
            <CardContent>
              <Bug className="h-16 w-16 text-green-300 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-700 mb-2">‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç / Select a Crop</h3>
              <p className="text-gray-500">
                ‡§ï‡•Ä‡§ü ‡§î‡§∞ ‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ä‡§™‡§∞ ‡§∏‡•á ‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç
                <br />
                Select your crop from above to view pest and disease information
              </p>
            </CardContent>
          </Card>
        )}

        {/* No Data State */}
        {selectedCrop && currentPests.length === 0 && (
          <Card className="text-center py-12">
            <CardContent>
              <Shield className="h-16 w-16 text-green-400 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-green-700 mb-2">‡§ï‡•ã‡§à ‡§ï‡•Ä‡§ü-‡§∞‡•ã‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ / No Pests Found</h3>
              <p className="text-gray-500">
                ‡§á‡§∏ ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§ï‡•Ä‡§ü-‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
                <br />
                No pest or disease information is currently available for this crop
              </p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
